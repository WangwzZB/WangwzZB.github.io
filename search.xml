<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WSL相关操作</title>
      <link href="2021/04/21/wsl/wsl/wsl-xiang-guan-cao-zuo/"/>
      <url>2021/04/21/wsl/wsl/wsl-xiang-guan-cao-zuo/</url>
      
        <content type="html"><![CDATA[<div align="center"><font size="70">WSL相关操作</font></div><h1 id="1-WSL-和-Windows主机文件互相访问"><a href="#1-WSL-和-Windows主机文件互相访问" class="headerlink" title="1. WSL 和 Windows主机文件互相访问"></a>1. WSL 和 Windows主机文件互相访问</h1><h2 id="1-1-WSL访问Windows-文件"><a href="#1-1-WSL访问Windows-文件" class="headerlink" title="1.1 WSL访问Windows 文件"></a>1.1 WSL访问Windows 文件</h2><p>命令行进入 /mnt 目录即可访问</p><p><img src="/2021/04/21/wsl/wsl/wsl-xiang-guan-cao-zuo/1.jpg"></p><h2 id="1-2-Windows访问-WSL文件"><a href="#1-2-Windows访问-WSL文件" class="headerlink" title="1.2 Windows访问 WSL文件"></a>1.2 Windows访问 WSL文件</h2><p>打开文件资源管理器，然后在目录窗口输入 <code>\\wsl$</code></p><p><img src="/2021/04/21/wsl/wsl/wsl-xiang-guan-cao-zuo/2.jpg"></p><h1 id="2-更新到WSL2版本"><a href="#2-更新到WSL2版本" class="headerlink" title="2. 更新到WSL2版本"></a>2. 更新到WSL2版本</h1><h2 id="第一步：使用-winver-查看windows版本"><a href="#第一步：使用-winver-查看windows版本" class="headerlink" title="第一步：使用 winver 查看windows版本"></a>第一步：使用 winver 查看windows版本</h2><p>版本需在2004版本以上，可以通过控制面板\所有控制面板项\系统 检测更新</p><h2 id="第二步：打开PowerShell-运行"><a href="#第二步：打开PowerShell-运行" class="headerlink" title="第二步：打开PowerShell 运行"></a>第二步：打开PowerShell 运行</h2><pre class="line-numbers language-none"><code class="language-none">PS C:\Users\wwz&gt; wsl -l -v  // 查看当前运行版本  NAME            STATE           VERSION* Ubuntu-18.04    Running         1PS C:\Users\wwz&gt; wsl --set-version Ubuntu-18.04 2正在进行转换，这可能需要几分钟时间...有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2转换完成。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="wsl错误：WslRegisterDistribution-failed-with-error-0x80370102"><a href="#wsl错误：WslRegisterDistribution-failed-with-error-0x80370102" class="headerlink" title="wsl错误：WslRegisterDistribution failed with error: 0x80370102"></a>wsl错误：WslRegisterDistribution failed with error: 0x80370102</h3><p>解决方法：设置 wsl –set-default-version 1 即可重新安装linux系统</p><p>bcdedit编辑win10启动选项hypervisorlaunchtype的off改为auto</p><h3 id="在打开wsl-版本的vscode-并使能编辑保存功能"><a href="#在打开wsl-版本的vscode-并使能编辑保存功能" class="headerlink" title="在打开wsl 版本的vscode 并使能编辑保存功能"></a>在打开wsl 版本的vscode 并使能编辑保存功能</h3><pre class="line-numbers language-none"><code class="language-none">root用户下，开启权限sudo chown -R wwz * 然后退出到普通用户：code . 打开VScode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL命令集合</title>
      <link href="2021/04/21/sql/sql/sql-ming-ling-ji-he/"/>
      <url>2021/04/21/sql/sql/sql-ming-ling-ji-he/</url>
      
        <content type="html"><![CDATA[<div align="center"><font size="70">SQL命令集合</font></div><ul><li>写在前面<br>在SQL语言中<br><code>-- 以双减号开头的是注释</code></li></ul><h1 id="1-外键"><a href="#1-外键" class="headerlink" title="1. 外键"></a>1. 外键</h1><h2 id="1-1-定义外键"><a href="#1-1-定义外键" class="headerlink" title="1.1 定义外键"></a>1.1 定义外键</h2><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE students ADD CONSTRAINT fk_class_id #定义外键约束，名称任意，通过定义外键约束，关系数据库可以保证无法插入无效的数据。在追求性能时，不定义外键约束。FOREIGN KEY (class_id) #指定class_id作为外键REFERENCES classes (id); #指定这个外键将关联到classes表的id列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2删除外键约束"><a href="#1-2删除外键约束" class="headerlink" title="1.2删除外键约束"></a>1.2删除外键约束</h2><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE studentsDROP FOREIGN KEY fk_class_id; #删除外键约束并没有删除外键这一列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h1><h2 id="2-1-创建索引"><a href="#2-1-创建索引" class="headerlink" title="2.1 创建索引"></a>2.1 创建索引</h2><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE studentsADD INDEX idx_name_score (name, score); #创建索引名称为idx_name_score,使用列name和score的索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-2-创建唯一索引"><a href="#2-2-创建唯一索引" class="headerlink" title="2.2 创建唯一索引"></a>2.2 创建唯一索引</h2><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE studentsADD UNIQUE INDEX uni_name (name); #通过UNIQUE关键字,对students表的name列创建唯一索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="3-创建唯一约束"><a href="#3-创建唯一约束" class="headerlink" title="3. 创建唯一约束"></a>3. 创建唯一约束</h1><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE studentsADD CONSTRAINT uni_name UNIQUE (name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="查询和修改数据的命令还未整理-需要时是查询网站吧"><a href="#查询和修改数据的命令还未整理-需要时是查询网站吧" class="headerlink" title="查询和修改数据的命令还未整理 需要时是查询网站吧"></a>查询和修改数据的命令还未整理 需要时是查询网站吧</h1><h1 id="4-MySQL操作命令"><a href="#4-MySQL操作命令" class="headerlink" title="4. MySQL操作命令"></a>4. MySQL操作命令</h1><h2 id="4-1-基础命令"><a href="#4-1-基础命令" class="headerlink" title="4.1 基础命令"></a>4.1 基础命令</h2><pre class="line-numbers language-none"><code class="language-none">apt-get install mysql-server #Debian和Ubuntu用户安装MySQLmysql -u root -p #打开MySQL Client程序，可以通过输入SQL命令语言进行操作mysql -h 10.0.1.99 -u root -p #使用mysql客户端连接远程服务器（服务器地址为10.0.1.99）$ mysql -u root -p &lt; init-test-data.sql #运行SQL脚本mysql&gt;exit #断开连接，EXIT仅仅断开了客户端和服务器的连接，MySQL服务器仍然继续运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-管理MySQL（在MySQL客户端下）"><a href="#4-2-管理MySQL（在MySQL客户端下）" class="headerlink" title="4.2 管理MySQL（在MySQL客户端下）"></a>4.2 管理MySQL（在MySQL客户端下）</h2><pre class="line-numbers language-none"><code class="language-none">SHOW DATABASES; #列出所有的数据库CREATE DATABASE test; #创建数据库DROP DATABASE test; #删除数据库USE test;#对一个数据库进行操作时首先应该切换到该数据库SHOW TABLES; #查看当前数据库所有表DESC students; #查看当前表的结构，每列（字段）的名称以及数据结构是什么，还有其他信息#创建表在下方DROP TABLE students; #删除表ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL; #修改表students，给students表新增一列birthALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL; #修改birth列，把列名改为birthday，类型改为VARCHAR(20)ALTER TABLE students DROP COLUMN birthday; #删除列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-MySQL脚本语言的编写"><a href="#4-3-MySQL脚本语言的编写" class="headerlink" title="4.3 MySQL脚本语言的编写"></a>4.3 MySQL脚本语言的编写</h2><ul><li>技巧1：在MySQL客户端下查看创建表的语句<pre class="line-numbers language-none"><code class="language-none">MySQL&gt;SHOW CREATE TABLE students; #查看创建表的SQL语句+----------+-------------------------------------------------------+| students | CREATE TABLE `students` (                             ||          |   `id` bigint(20) NOT NULL AUTO_INCREMENT,            ||          |   `class_id` bigint(20) NOT NULL,                     ||          |   `name` varchar(100) NOT NULL,                       ||          |   `gender` varchar(1) NOT NULL,                       ||          |   `score` int(11) NOT NULL,                           ||          |   PRIMARY KEY (`id`)                                  ||          | ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 |+----------+-------------------------------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>技巧2:实用的SQL语言<ul><li>插入或替换：有则替换，无则插入,<br><code>REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99); #判断标准是主键id是否重复</code></li><li>插入或更新：有则更新，无则插入<br><code>INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99) ON DUPLICATE KEY UPDATE name='小明', gender='F', score=99; #更新的字段由UPDATE指定</code></li><li>插入或忽略: 有则忽略，无则插入<br><code>INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);</code></li><li>对表进行快照（可以根据一定筛选标准生成一个新的和原表结构相同的表）<br><code>CREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;# 对class_id=1的记录进行快照，并存储为新表students_of_class1:</code></li><li>写入查询结果集：将查询到的信息生成一个新的表<pre class="line-numbers language-none"><code class="language-none">-- 创建一个统计成绩的表statistics，记录各班的平均成绩CREATE TABLE statistics (    id BIGINT NOT NULL AUTO_INCREMENT,    class_id BIGINT NOT NULL,    average DOUBLE NOT NULL,    PRIMARY KEY (id));-- 写入各班的平均成绩-- 注意：确保INSERT语句的列和SELECT语句的列能一一对应INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>强制使用指定引索(当你知道哪个引索最快的时候）<pre class="line-numbers language-none"><code class="language-none">--指定索引的前提是索引idx_class_idSELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="5-事务"><a href="#5-事务" class="headerlink" title="5. 事务"></a>5. 事务</h1><ul><li>开启并提交事务<pre class="line-numbers language-none"><code class="language-none">BEGIN; #开启事务UPDATE accounts SET balance = balance - 100 WHERE id = 1;UPDATE accounts SET balance = balance + 100 WHERE id = 2;COMMIT; #提交事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>回滚事务：让事务主动失败(恢复事务执行前的状态）<pre class="line-numbers language-none"><code class="language-none">BEGIN;UPDATE accounts SET balance = balance - 100 WHERE id = 1;UPDATE accounts SET balance = balance + 100 WHERE id = 2;ROLLBACK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>设置事务隔离级别<br>```<br>SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; # READ UNCOMMITTED级别</li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL理论概念整理</title>
      <link href="2021/04/21/sql/sql/sql-bi-ji-zheng-li/"/>
      <url>2021/04/21/sql/sql/sql-bi-ji-zheng-li/</url>
      
        <content type="html"><![CDATA[<div align="center"><font size="70">SQL理论概念整理</font></div><h1 id="1-为什么需要数据库"><a href="#1-为什么需要数据库" class="headerlink" title="1.为什么需要数据库"></a>1.为什么需要数据库</h1><ul><li>   一个统一的规范的，对数据进行读、写、查找、增删等操作的接口。</li></ul><h1 id="2-什么是关系型数据模型"><a href="#2-什么是关系型数据模型" class="headerlink" title="2.什么是关系型数据模型"></a>2.什么是关系型数据模型</h1><h2 id="2-1-数据模型"><a href="#2-1-数据模型" class="headerlink" title="2.1 数据模型"></a>2.1 数据模型</h2><ul><li>层次模型</li><li></li><li>网状模型</li><li>关系模型（广泛使用）</li></ul><h2 id="2-2-我的理解"><a href="#2-2-我的理解" class="headerlink" title="2.2 我的理解"></a>2.2 我的理解</h2><p>不同的二维表格通过某一行，或者某一列等关联起来（点击某一列的元素下面还有另一个二维表）</p><h2 id="3-关系表中的数据类型"><a href="#3-关系表中的数据类型" class="headerlink" title="3.关系表中的数据类型"></a>3.关系表中的数据类型</h2><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>INT</td><td>整型</td><td>4字节整数类型，范围约+/-21亿</td></tr><tr><td>BIGINT</td><td>长整型</td><td>8字节整数类型，范围约+/-922亿亿</td></tr><tr><td>REAL</td><td>浮点型</td><td>4字节浮点数，范围约+/-1038</td></tr><tr><td>DOUBLE</td><td>浮点型</td><td>8字节浮点数，范围约+/-10308</td></tr><tr><td>DECIMAL(M,N)</td><td>高精度小数</td><td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td>CHAR(N)</td><td>定长字符串</td><td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td>VARCHAR(N)</td><td>变长字符串</td><td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td>BOOLEAN</td><td>布尔类型</td><td>存储True或者False</td></tr><tr><td>DATE</td><td>日期类型</td><td>存储日期，例如，2018-06-22</td></tr><tr><td>TIME</td><td>时间类型</td><td>存储时间，例如，12:20:59</td></tr><tr><td>DATETIME</td><td>日期和时间类型</td><td>存储日期+时间，例如，2018-06-22 12:20:59</td></tr><tr><td>特定数据类型如 JSON</td><td></td><td></td></tr></tbody></table><h2 id="4-主流关系数据库"><a href="#4-主流关系数据库" class="headerlink" title="4.主流关系数据库"></a>4.主流关系数据库</h2><ul><li>商用数据库，例如：Oracle，SQL Server，DB2等；</li><li>开源数据库，例如：MySQL，PostgreSQL等；</li><li>桌面数据库，以微软Access为代表，适合桌面应用程序使用；</li><li>嵌入式数据库，以Sqlite为代表，适合手机应用和桌面程序。</li></ul><h2 id="5-结构化查询语言SQL是什么？"><a href="#5-结构化查询语言SQL是什么？" class="headerlink" title="5.结构化查询语言SQL是什么？"></a>5.结构化查询语言SQL是什么？</h2><p>标准SQL的核心功能公用，包括：</p><ul><li><p>DDL：Data Definition Language</p><p>  DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。</p></li><li><p>DML：Data Manipulation Language</p><p>  DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</p></li><li><p>DQL：Data Query Language</p><p>  DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。</p></li></ul><h2 id="6-SQL语言关键字不区分大小写，不同数据库有出入"><a href="#6-SQL语言关键字不区分大小写，不同数据库有出入" class="headerlink" title="6.SQL语言关键字不区分大小写，不同数据库有出入"></a>6.SQL语言关键字不区分大小写，不同数据库有出入</h2><h2 id="7-关系模型"><a href="#7-关系模型" class="headerlink" title="7.关系模型"></a>7.关系模型</h2><ul><li><p>定义：关系数据库是建立在关系模型上的。关系模型本质上就是若干个存储数据的二维表</p></li><li><p>表的每一行称为记录（Record），记录是一个逻辑意义上的数据。</p></li><li><p>表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。</p></li><li><p>避免数据类型为NULL</p></li><li><p>为了按照应用程序的逻辑来组织和存储数据，关系数据库的表和表之间需要建立以下关系：</p><ul><li>一对多：一个班级对应多个学生</li><li>多对一：学生表中的多条学生记录对应一个班级</li><li>一对一：一个学生对应一个电话号码记录，一对一的关系表可以合并，但拆分是为了1.将常用的数据提取出来 2.避免记录中有<code>NULL</code>类型</li><li>多对多：一个老师对应多个班级，一个班级对应多个老师，将班级和老师字段列在一个表里。<br>判断关系标准：能不能有多个不相同的行对应同一列字段所代表的令一个二维表？</li></ul></li></ul><h2 id="7-1主键"><a href="#7-1主键" class="headerlink" title="7.1主键"></a>7.1主键</h2><ul><li>定义：能够唯一区分出不同记录的字段</li><li>主键选取的原则：不使用业务相关字段，不为<code>NULL</code>,通常为<code>id</code></li><li><code>id</code>字段类型：<ul><li>自增证书类型，<code>BIGINT NOT NULL AUTO_INCREMENT</code> BIGINT自增类型则可以最多约922亿亿条记录</li><li>全局唯一GUID类型（全局唯一字符串）</li></ul></li><li>联合主键：两个或更多的字段都设置为主键，只要不是所有主键列都重复</li></ul><h2 id="7-2外键"><a href="#7-2外键" class="headerlink" title="7.2外键"></a>7.2外键</h2><ul><li>定义：可以与另一张表关联起来的字段</li><li>作用：关系数据库通过外键可以实现一对多、多对多和一对一的关系</li></ul><h2 id="7-3索引"><a href="#7-3索引" class="headerlink" title="7.3索引"></a>7.3索引</h2><ul><li>定义：对某一列或多个列的值进行预排序的数据结构</li><li>作用：数据库系统不必扫描整个表，而是直接定位到符合条件的记录</li><li>索引效率取决于索引列的值是否散列</li><li>对数据进行操作时，需要同时更改索引</li><li>唯一索引<ul><li>作用：保证某一列的值具有唯一性，列如身份证号字段。<code>唯一约束也可以保证唯一性</code></li></ul></li><li>数据库索引对于用户和应用程序来说都是透明的,创不创建只有查询速度的区别</li></ul><h1 id="8-MySQL相关知识"><a href="#8-MySQL相关知识" class="headerlink" title="8. MySQL相关知识"></a>8. MySQL相关知识</h1><h2 id="8-1-MySQL-Client和MySQL-Server的关系"><a href="#8-1-MySQL-Client和MySQL-Server的关系" class="headerlink" title="8.1 MySQL Client和MySQL Server的关系"></a>8.1 MySQL Client和MySQL Server的关系</h2><ul><li>MySQL Client的可执行程序是mysql，MySQL Server的可执行程序是mysqld</li><li>MySQL Client中输入的SQL语句通过TCP连接发送到MySQL Server。默认端口号是3306，即如果发送到本机MySQL Server，地址就是127.0.0.1:3306</li><li>命令行程序mysql实际上是MySQL客户端，真正的MySQL服务器程序是mysqld，在后台运行</li><li>InnoDB，是MySQL的数据库引擎之一，现为MySQL的默认存储引擎<h2 id="8-2-MySQL数据库的组成"><a href="#8-2-MySQL数据库的组成" class="headerlink" title="8.2 MySQL数据库的组成"></a>8.2 MySQL数据库的组成</h2>在一个运行MySQL的服务器上，实际上可以创建多个数据库（Database），其中，<code>information</code>_<code>schema</code>、<code>mysql</code>、<code>performance_schema</code>和<code>sys</code>是系统库，不要去改动它们。</li></ul><h1 id="9-事务"><a href="#9-事务" class="headerlink" title="9. 事务"></a>9. 事务</h1><h1 id="9-1-基础概念"><a href="#9-1-基础概念" class="headerlink" title="9.1 基础概念"></a>9.1 基础概念</h1><ul><li>定义：把多条语句作为一个整体进行操作的功能</li><li>作用：某些业务要求一系列的SQL语句必须全部执行，例如银行转账，一个账户减少100元，令一个账户必须多出100，如果如果第一条语句成功，第二条语句失败，就必须全部撤销</li><li>数据库事务的四个特性ACID<ul><li>A：Atomic，原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>C：Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>I：Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>D：Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul></li><li>分类<ul><li>隐式事务：数据库自动将单条SQL语句当做一个事务</li><li>显示事务：使用BEGIN开启一个事务，使用COMMIT提交一个事务</li></ul></li><li>回滚事务<br>有些时候，我们希望主动让事务失败，这时，可以用ROLLBACK回滚事务，整个事务会失败<h2 id="到是什么是事务失败？执行SQL语句报错并不算事务失败，SQL语句没有传到数据库并执行的时候才算失败。"><a href="#到是什么是事务失败？执行SQL语句报错并不算事务失败，SQL语句没有传到数据库并执行的时候才算失败。" class="headerlink" title="到是什么是事务失败？执行SQL语句报错并不算事务失败，SQL语句没有传到数据库并执行的时候才算失败。##"></a>到是什么是事务失败？执行SQL语句报错并不算事务失败，SQL语句没有传到数据库并执行的时候才算失败。##</h2>如果返回的信息符合自己预期的改动，则就可以输入COMMIT; 执行提交，如果不符合自己预期的改动或者其中一条sql出错啦，也可以输入COMMIT; 执行提交，但只会保存执行成功的那条sql语句的结果，出错的sql则不改变。如果发现出错在没有执行  COMMIT  的话，你也可以选择输入 ROLLBACK 回滚,那么这个事务就不提交啦。所以说执行完事务的内容后，必须选择ROLLBACK或COMMIT执行，才算事务结束。</li></ul><h2 id="9-2-隔离级别"><a href="#9-2-隔离级别" class="headerlink" title="9.2 隔离级别"></a>9.2 隔离级别</h2><h3 id="9-2-1-基本概念"><a href="#9-2-1-基本概念" class="headerlink" title="9.2.1 基本概念"></a>9.2.1 基本概念</h3><ul><li>定义：数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。</li><li>作用：对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。</li></ul><table><thead><tr><th>Isolation Level</th><th>脏读（Dirty Read）</th><th>不可重复读（Non Repeatable Read）</th><th>幻读（Phantom Read）</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Read Committed</td><td>-</td><td>Yes</td><td>Yes</td></tr><tr><td>Repeatable Read</td><td></td><td>-</td><td>-</td></tr><tr><td>Serializable</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h3 id="9-2-2-详细解释"><a href="#9-2-2-详细解释" class="headerlink" title="9.2.2 详细解释"></a>9.2.2 详细解释</h3><ul><li><p>Read Uncommitted（可以读没有提交的）</p><ul><li><p>Read Uncommitted是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）。</p></li><li><p>read uncommitted 隔离级别下，一个事务可以读到另一个事务更新数据后未提交的数据</p></li></ul></li><li><p>Read Committed（只能读另一个任务提交过的）</p><ul><li>一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。</li><li>不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。</li><li>一个事务在另一个事务更新数据后，不能读取另一个事务更新数据后 **未提交 **的数据(或者说想读取更新后的数据，必须在提交事务后；在提交事务前，只能读取到更新前的数据)</li></ul></li><li><p>Repeatable Read （可重复读的）</p><ul><li><p>一个事务可能会遇到幻读（Phantom Read）的问题。</p></li><li><p>幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。</p></li><li><p>幻读就是没有读到的记录，以为不存在，但其实是可以更新成功的，并且，更新成功后，再次读取，就出现了。</p></li></ul></li><li><p>Serializable（串行的）</p><ul><li><p>在Serializable隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。</p></li><li><p>虽然Serializable隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别。</p></li></ul></li><li><p>默认隔离级别<br>如果没有指定隔离级别，数据库就会使用默认的隔离级别。在MySQL中，如果使用InnoDB，默认的隔离级别是Repeatable Read。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 脚本语言笔记</title>
      <link href="2021/04/21/shell/shell/shell-jiao-cheng/"/>
      <url>2021/04/21/shell/shell/shell-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<div align="center"><font size="70">Shell 脚本语言笔记</font></div># 一、Shell 简介Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。<p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p><p><a href="https://www.runoob.com/try/runcode.php?filename=helloworld&amp;type=bash">Shell 在线工具</a></p><h2 id="1-Shell-脚本"><a href="#1-Shell-脚本" class="headerlink" title="1. Shell 脚本"></a>1. Shell 脚本</h2><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p>业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p><p>由于习惯的原因，简洁起见，本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</p><h2 id="2-Shell-环境"><a href="#2-Shell-环境" class="headerlink" title="2. Shell 环境"></a>2. Shell 环境</h2><p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><p>Linux 的 Shell 种类众多，常见的有：</p><p>Bourne Shell（/usr/bin/sh或/bin/sh）<br>Bourne Again Shell（/bin/bash）<br>C Shell（/usr/bin/csh）<br>K Shell（/usr/bin/ksh）<br>Shell for Root（/sbin/sh）<br>……<br>本教程关注的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。</p><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 #!/bin/sh，它同样也可以改为 #!/bin/bash。</p><p><code>#! 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</code></p><h2 id="3-第一个shell脚本"><a href="#3-第一个shell脚本" class="headerlink" title="3. 第一个shell脚本"></a>3. 第一个shell脚本</h2><p>打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。</p><p>输入一些代码，第一行一般是这样：</p><p>实例:<br><code>#!/bin/bash</code><br><code>echo "Hello World !"</code><br><code>#!</code> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。<br>echo 命令用于向窗口输出文本。</p><h2 id="4-运行-Shell-脚本有两种方法："><a href="#4-运行-Shell-脚本有两种方法：" class="headerlink" title="4. 运行 Shell 脚本有两种方法："></a>4. 运行 Shell 脚本有两种方法：</h2><h3 id="4-1作为可执行程序"><a href="#4-1作为可执行程序" class="headerlink" title="4.1作为可执行程序"></a>4.1作为可执行程序</h3><p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p><p>chmod +x ./test.sh  #使脚本具有执行权限<br>./test.sh  #执行脚本<br>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p><h3 id="4-2作为解释器参数"><a href="#4-2作为解释器参数" class="headerlink" title="4.2作为解释器参数"></a>4.2作为解释器参数</h3><p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p><pre class="line-numbers language-none"><code class="language-none">/bin/sh test.sh/bin/php test.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><h1 id="二、Shell变量"><a href="#二、Shell变量" class="headerlink" title="二、Shell变量"></a>二、Shell变量</h1><h2 id="1-变量命名"><a href="#1-变量命名" class="headerlink" title="1. 变量命名"></a>1. 变量命名</h2><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：<br><code>your_name="runoob.com"</code></p><p><code>注意，变量名和等号之间不能有空格</code>，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>有效的 Shell 变量名示例如下：</p><pre class="line-numbers language-none"><code class="language-none">RUNOOBLD_LIBRARY_PATH_varvar2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>无效的变量命名：</p><pre class="line-numbers language-none"><code class="language-none">?var=123user*name=runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p><pre class="line-numbers language-none"><code class="language-none">for file in `ls /etc`或for file in $(ls /etc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上语句将 /etc 下目录的文件名循环出来。</p><h2 id="2-使用变量"><a href="#2-使用变量" class="headerlink" title="2. 使用变量"></a>2. 使用变量</h2><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><pre class="line-numbers language-none"><code class="language-none">your_name="qinjx"echo $your_nameecho ${your_name}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><pre class="line-numbers language-none"><code class="language-none">for skill in Ada Coffe Action Java; do    echo "I am good at ${skill}Script"done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。</p><p>已定义的变量，可以被重新定义，如：</p><pre class="line-numbers language-none"><code class="language-none">your_name="tom"echo $your_nameyour_name="alibaba"echo $your_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=”alibaba”，使用变量的时候才加美元符（$）。</p><h2 id="3-只读变量"><a href="#3-只读变量" class="headerlink" title="3.只读变量"></a>3.只读变量</h2><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><p>下面的例子尝试更改只读变量，结果报错：</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bashmyUrl="https://www.google.com"readonly myUrlmyUrl="https://www.runoob.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">/bin/sh: NAME: This variable is read only.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-删除变量"><a href="#4-删除变量" class="headerlink" title="4.删除变量"></a>4.删除变量</h2><p>使用 unset 命令可以删除变量。语法：</p><p><code>unset variable_name</code><br>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><p>实例</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/shmyUrl="https://www.runoob.com"unset myUrlecho $myUrl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例执行将没有任何输出。</p><h2 id="5-变量类型"><a href="#5-变量类型" class="headerlink" title="5.变量类型"></a>5.变量类型</h2><p>运行shell时，会同时存在三种变量：</p><ul><li><ol><li>局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li></ol></li><li><ol start="2"><li>环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li></ol></li><li><ol start="3"><li>shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ol></li></ul><h2 id="6-shell字符串"><a href="#6-shell字符串" class="headerlink" title="6. shell字符串"></a>6. shell字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h3 id="6-1-单引号"><a href="#6-1-单引号" class="headerlink" title="6.1 单引号"></a>6.1 单引号</h3><p><code>str='this is a string'</code><br>单引号字符串的限制：</p><p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；<br>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。<br>双引号</p><pre class="line-numbers language-none"><code class="language-none">your_name='runoob'str="Hello, I know you are \"$your_name\"! \n"echo -e $str<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">Hello, I know you are "runoob"! <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="6-2拼接字符串"><a href="#6-2拼接字符串" class="headerlink" title="6.2拼接字符串"></a>6.2拼接字符串</h3><pre class="line-numbers language-none"><code class="language-none">your_name="runoob"# 使用双引号拼接greeting="hello, "$your_name" !"greeting_1="hello, ${your_name} !"echo $greeting  $greeting_1# 使用单引号拼接greeting_2='hello, '$your_name' !'greeting_3='hello, ${your_name} !'echo $greeting_2  $greeting_3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">hello, runoob ! hello, runoob !hello, runoob ! hello, ${your_name} !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-3-获取字符串长度"><a href="#6-3-获取字符串长度" class="headerlink" title="6.3 获取字符串长度"></a>6.3 获取字符串长度</h3><pre class="line-numbers language-none"><code class="language-none">string="abcd"echo ${#string} #输出 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-4-提取子字符串"><a href="#6-4-提取子字符串" class="headerlink" title="6.4 提取子字符串"></a>6.4 提取子字符串</h3><p>以下实例从字符串第 2 个字符开始截取 4 个字符:</p><pre class="line-numbers language-none"><code class="language-none">string="runoob is a great site"echo ${string:1:4} # 输出 unoo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>注意</code>：第一个字符的索引值为 0。</p><h3 id="6-5-查找子字符串"><a href="#6-5-查找子字符串" class="headerlink" title="6.5 查找子字符串"></a>6.5 查找子字符串</h3><p>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：</p><pre class="line-numbers language-none"><code class="language-none">string="runoob is a great site"echo `expr index "$string" io`  # 输出 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意： 以上脚本中 <code> </code> `是反引号，而不是单引号 ‘，不要看错了哦。</p><h2 id="7-Shell-数组"><a href="#7-Shell-数组" class="headerlink" title="7.Shell 数组"></a>7.Shell 数组</h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h3 id="7-1定义数组"><a href="#7-1定义数组" class="headerlink" title="7.1定义数组"></a>7.1定义数组</h3><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><p>数组名=(值1 值2 … 值n)<br>例如：</p><pre class="line-numbers language-none"><code class="language-none">array_name=(value0 value1 value2 value3)或者array_name=(value0value1value2value3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以单独定义数组的各个分量：</p><pre class="line-numbers language-none"><code class="language-none">array_name[0]=value0array_name[1]=value1array_name[n]=valuen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="7-2-读取数组元素值的一般格式是："><a href="#7-2-读取数组元素值的一般格式是：" class="headerlink" title="7.2 读取数组元素值的一般格式是："></a>7.2 读取数组元素值的一般格式是：</h3><pre class="line-numbers language-none"><code class="language-none">${数组名[下标]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">valuen=${array_name[n]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用@ 或 * 可以获取数组中的所有元素，例如：</p><pre class="line-numbers language-none"><code class="language-none">echo ${array_name[@]}echo ${array_name[*]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-3-获取数组的长度"><a href="#7-3-获取数组的长度" class="headerlink" title="7.3 获取数组的长度"></a>7.3 获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><pre class="line-numbers language-none"><code class="language-none"># 取得数组元素的个数length=${#array_name[@]}# 或者length=${#array_name[*]}# 取得数组单个元素的长度lengthn=${#array_name[n]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-Shell-注释"><a href="#8-Shell-注释" class="headerlink" title="8. Shell 注释"></a>8. Shell 注释</h2><h3 id="8-1-以-开头的行就是注释，会被解释器忽略。"><a href="#8-1-以-开头的行就是注释，会被解释器忽略。" class="headerlink" title="8.1  以 # 开头的行就是注释，会被解释器忽略。"></a>8.1  以 <code># </code>开头的行就是注释，会被解释器忽略。</h3><p>通过每一行加一个 # 号设置多行注释，像这样：</p><pre class="line-numbers language-none"><code class="language-none">#--------------------------------------------# 这是一个注释# author：菜鸟教程# site：www.runoob.com# slogan：学的不仅是技术，更是梦想！#--------------------------------------------##### 用户配置区 开始 ######## 这里可以添加脚本描述信息# ###### 用户配置区 结束  #####<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p><p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h3 id="8-2-多行注释"><a href="#8-2-多行注释" class="headerlink" title="8.2 多行注释"></a>8.2 多行注释</h3><p>多行注释还可以使用以下格式：</p><pre class="line-numbers language-none"><code class="language-none">:&lt;&lt;EOF注释内容...注释内容...注释内容...EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EOF 也可以使用其他符号:</p><pre class="line-numbers language-none"><code class="language-none">:&lt;&lt;'注释内容...注释内容...注释内容...'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">:&lt;&lt;!注释内容...注释内容...注释内容...!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、Shell传递参数"><a href="#三、Shell传递参数" class="headerlink" title="三、Shell传递参数"></a>三、Shell传递参数</h1><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><p>实例<br>以下实例我们向脚本传递三个参数，并分别输出，其中 $0 为执行的文件名（包含文件路径）：</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# author:菜鸟教程# url:www.runoob.comecho "Shell 传递参数实例！";echo "执行的文件名：$0";echo "第一个参数为：$1";echo "第二个参数为：$2";echo "第三个参数为：$3";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">$ chmod +x test.sh $ ./test.sh 1 2 3Shell 传递参数实例！执行的文件名：./test.sh第一个参数为：1第二个参数为：2第三个参数为：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="center">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="center">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="center">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="center">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="center">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” …”$n”的形式输出所有参数。</td></tr><tr><td align="center">$-</td><td align="left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td align="center">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# author:菜鸟教程# url:www.runoob.comecho "Shell 传递参数实例！";echo "第一个参数为：$1";echo "参数个数为：$#";echo "传递的参数作为一个字符串显示：$*";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本，输出结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">$ chmod +x test.sh $ ./test.sh 1 2 3Shell 传递参数实例！第一个参数为：1参数个数为：3传递的参数作为一个字符串显示：1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$* 与 $@ 区别：</p><p>相同点：都是引用所有参数。<br>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# author:菜鸟教程# url:www.runoob.comecho "-- \$* 演示 ---"for i in "$*"; do    echo $idoneecho "-- \$@ 演示 ---"for i in "$@"; do    echo $idone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本，输出结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">$ chmod +x test.sh $ ./test.sh 1 2 3-- $* 演示 ---1 2 3-- $@ 演示 ---123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、Shell-运算符"><a href="#四、Shell-运算符" class="headerlink" title="四、Shell 运算符"></a>四、Shell 运算符</h1><h2 id="1-Shell-基本运算符"><a href="#1-Shell-基本运算符" class="headerlink" title="1. Shell 基本运算符"></a>1. Shell 基本运算符</h2><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符<br>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</li></ul><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。<br>例如，两个数相加( 注意使用的是反引号 `  而不是单引号  ‘ )：</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bashval=`expr 2 + 2`echo "两数之和为 : $val"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本，输出结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">两数之和为 : 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两点注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <code> </code> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><h2 id="2-算术运算符"><a href="#2-算术运算符" class="headerlink" title="2.算术运算符"></a>2.算术运算符</h2><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>`expr $a + $b` 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td>`expr $a - $b` 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td>`expr $a * $b` 结果为  200。</td></tr><tr><td>/</td><td>除法</td><td>`expr $b / $a` 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td>`expr $b % $a` 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等</td><td>用于比较两个数字，相同则返回 true。    [ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等</td><td>用于比较两个数字，不相同则返回 true。    [ $a != $b ] 返回 true。</td></tr></tbody></table><p><code>注意：条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]</code></p><p>实例<br>算术运算符实例如下：</p><p>实例</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# author:菜鸟教程# url:www.runoob.coma=10b=20val=`expr $a + $b`echo "a + b : $val"val=`expr $a - $b`echo "a - b : $val"val=`expr $a \* $b`echo "a * b : $val"val=`expr $b / $a`echo "b / a : $val"val=`expr $b % $a`echo "b % a : $val"if [ $a == $b ]then   echo "a 等于 b"fiif [ $a != $b ]then   echo "a 不等于 b"fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本，输出结果如下所示：</p><pre class="line-numbers language-none"><code class="language-none">a + b : 30a - b : -10a * b : 200b / a : 2b % a : 0a 不等于 b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:</p><pre class="line-numbers language-none"><code class="language-none">乘号(*)前边必须加反斜杠(\)才能实现乘法运算；if...then...fi 是条件语句，后续将会讲解。在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 "*" 不需要转义符号 "\" 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-关系运算符"><a href="#3-关系运算符" class="headerlink" title="3. 关系运算符"></a>3. 关系运算符</h2><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明    举例</th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回 true。</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td></tr><tr><td>-ge    检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false。</td></tr><tr><td>-le    检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true。</td></tr></tbody></table><h2 id="4-布尔运算符"><a href="#4-布尔运算符" class="headerlink" title="4.布尔运算符"></a>4.布尔运算符</h2><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>!</td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ ! false ] 返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为 true 则返回 true。</td><td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为 true 才返回 true。</td><td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h2><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑的 AND</td><td>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr></tbody></table><p><code>|| 逻辑的 OR [[ $a -lt 100  $b -gt 100 ]] 返回 true</code></p><h2 id="6-字符串运算符"><a href="#6-字符串运算符" class="headerlink" title="6.字符串运算符"></a>6.字符串运算符</h2><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0返回 true。</td><td>[ -z $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否不为 0，不为 0 返回 true。</td><td>[ -n “$a” ] 返回 true。</td></tr><tr><td>$</td><td>检测字符串是否为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><h2 id="7-文件测试运算符"><a href="#7-文件测试运算符" class="headerlink" title="7.文件测试运算符"></a>7.文件测试运算符</h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th>操作符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr><tr><td>其他检查符：</td><td></td><td></td></tr></tbody></table><ul><li>-S: 判断某文件是否 socket。</li><li>-L: 检测文件是否存在并且是一个符号链接。</li></ul><h1 id="五、Shell-echo命令"><a href="#五、Shell-echo命令" class="headerlink" title="五、Shell echo命令"></a>五、Shell echo命令</h1><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p><p>echo string<br>您可以使用echo实现更复杂的输出格式控制。</p><h2 id="1-显示普通字符串"><a href="#1-显示普通字符串" class="headerlink" title="1.显示普通字符串:"></a>1.显示普通字符串:</h2><pre class="line-numbers language-none"><code class="language-none">echo "It is a test"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p><pre class="line-numbers language-none"><code class="language-none">echo It is a test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-显示转义字符"><a href="#2-显示转义字符" class="headerlink" title="2.显示转义字符"></a>2.显示转义字符</h2><pre class="line-numbers language-none"><code class="language-none">echo "\"It is a test\""<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果将是:</p><pre class="line-numbers language-none"><code class="language-none">"It is a test"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样，双引号也可以省略</p><h2 id="3-显示变量"><a href="#3-显示变量" class="headerlink" title="3.显示变量"></a>3.显示变量</h2><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/shread name echo "$name It is a test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p><pre class="line-numbers language-none"><code class="language-none">[root@www ~]# sh test.shOK                     #标准输入OK It is a test        #输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-显示换行"><a href="#4-显示换行" class="headerlink" title="4.显示换行"></a>4.显示换行</h2><pre class="line-numbers language-none"><code class="language-none">echo -e "OK! \n" # -e 开启转义echo "It is a test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">OK!It is a test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-显示不换行"><a href="#5-显示不换行" class="headerlink" title="5.显示不换行"></a>5.显示不换行</h2><pre class="line-numbers language-none"><code class="language-none">#!/bin/shecho -e "OK! \c" # -e 开启转义 \c 不换行echo "It is a test"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">OK! It is a test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-显示结果定向至文件"><a href="#6-显示结果定向至文件" class="headerlink" title="6.显示结果定向至文件"></a>6.显示结果定向至文件</h2><p><code>echo "It is a test" &gt; myfile</code></p><h2 id="7-原样输出字符串，不进行转义或取变量-用单引号"><a href="#7-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="7.原样输出字符串，不进行转义或取变量(用单引号)"></a>7.原样输出字符串，不进行转义或取变量(用单引号)</h2><p><code>echo '$name\"'</code><br>输出结果：</p><p><code>$name\"</code></p><h2 id="8-显示命令执行结果"><a href="#8-显示命令执行结果" class="headerlink" title="8.显示命令执行结果"></a>8.显示命令执行结果</h2><pre class="line-numbers language-none"><code class="language-none">echo `date`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意： 这里使用的是反引号 `, 而不是单引号 ‘。</p><p>结果将显示当前日期</p><h2 id="9-echo-n-不换行输出"><a href="#9-echo-n-不换行输出" class="headerlink" title="9. echo -n 不换行输出"></a>9. echo -n 不换行输出</h2><pre class="line-numbers language-none"><code class="language-none">$echo -n "123" $echo "456"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终输出 123456 而不是 123 456</p><p>若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出： </p><h1 id="六、Shell-printf-命令"><a href="#六、Shell-printf-命令" class="headerlink" title="六、Shell printf 命令"></a>六、Shell printf 命令</h1><p>上一章节我们学习了 Shell 的 echo 命令，本章节我们来学习 Shell 的另一个输出命令 printf。</p><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。</p><p>printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。</p><p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \n。</p><h2 id="1-printf-命令的语法："><a href="#1-printf-命令的语法：" class="headerlink" title="1. printf 命令的语法："></a>1. printf 命令的语法：</h2><pre><code>printf  format-string  [arguments...]<pre class="line-numbers language-none"><code class="language-none">参数说明：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>format-string: 为格式控制字符串arguments: 为参数列表。<pre class="line-numbers language-none"><code class="language-none">实例如下：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>$ echo "Hello, Shell"Hello, Shell$ printf "Hello, Shell\n"Hello, Shell$<pre class="line-numbers language-none"><code class="language-none">接下来,我来用一个脚本来体现printf的强大功能：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.com printf "%-10s %-8s %-4s\n" 姓名 性别 体重kg  printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234 printf "%-10s %-8s %-4.2f\n" 杨过 男 48.6543 printf "%-10s %-8s %-4.2f\n" 郭芙 女 47.9876 <pre class="line-numbers language-none"><code class="language-none">执行脚本，输出结果如下所示：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>姓名     性别   体重kg郭靖     男      66.12杨过     男      48.65郭芙     女      47.99<pre class="line-numbers language-none"><code class="language-none">%s %c %d %f都是格式替代符%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。%-4.2f 指格式化为小数，其中.2指保留2位小数。更多实例：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.com # format-string为双引号printf "%d %s\n" 1 "abc"# 单引号与双引号效果一样 printf '%d %s\n' 1 "abc" # 没有引号也可以输出printf %s abcdef# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用printf %s abc defprintf "%s\n" abc defprintf "%s %s %s\n" a b c d e f g h i j# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替printf "%s and %d \n" <pre class="line-numbers language-none"><code class="language-none">执行脚本，输出结果如下所示：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>1 abc1 abcabcdefabcdefabcdefa b cd e fg h ij   and 0<pre class="line-numbers language-none"><code class="language-none">## 2. printf的转义序列|序列|说明||----|-----||\a|警告字符，通常为ASCII的BEL字符||\b|后退||\c|抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略||\f|换页（formfeed）||\n|换行||\r|回车（Carriage return）||\t|水平制表符||\v|垂直制表符||\\|一个字面上的反斜杠字符||\ddd|表示1到3位数八进制值的字符。仅在格式字符串中有效||\0ddd|表示1到3位的八进制值字符|实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>$ printf "a string, no processing:&lt;%s&gt;\n" "A\nB"a string, no processing:&lt;A\nB&gt;$ printf "a string, no processing:&lt;%b&gt;\n" "A\nB"a string, no processing:&lt;AB&gt;$ printf "www.runoob.com \a"www.runoob.com $                  #不换行<pre class="line-numbers language-none"><code class="language-none"># 七、Shell test 命令Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。## 1. 数值测试实例演示：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>num1=100num2=100if test $[num1] -eq $[num2]then    echo '两个数相等！'else    echo '两个数不相等！'fi<pre class="line-numbers language-none"><code class="language-none">输出结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>两个数相等！<pre class="line-numbers language-none"><code class="language-none">代码中的 [] 执行基本的算数运算，如：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#!/bin/basha=5b=6result=$[a+b] # 注意等号两边不能有空格echo "result 为： $result"<pre class="line-numbers language-none"><code class="language-none">结果为:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>result 为： 11<pre class="line-numbers language-none"><code class="language-none">## 2. 字符串测试实例演示：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>num1="ru1noob"num2="runoob"if test $num1 = $num2then    echo '两个字符串相等!'else    echo '两个字符串不相等!'fi<pre class="line-numbers language-none"><code class="language-none">输出结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>两个字符串不相等!<pre class="line-numbers language-none"><code class="language-none">## 3. 文件测试实例演示：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>cd /binif test -e ./bashthen    echo '文件已存在!'else    echo '文件不存在!'fi<pre class="line-numbers language-none"><code class="language-none">输出结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>文件已存在!<pre class="line-numbers language-none"><code class="language-none">另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为："!"最高，"-a"次之，"-o"最低。例如：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>cd /binif test -e ./notFile -o -e ./bashthen    echo '至少有一个文件存在!'else    echo '两个文件都不存在'fi<pre class="line-numbers language-none"><code class="language-none">输出结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>至少有一个文件存在!<pre class="line-numbers language-none"><code class="language-none"># 八、Shell 流程控制和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>&lt;?phpif (isset($_GET["q"])) {    search(q);}else {    // 不做任何事情}<pre class="line-numbers language-none"><code class="language-none">在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。## 1. 条件语句### 1.1 if 语句语法格式：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>if conditionthen    command1     command2    ...    commandN fi<pre class="line-numbers language-none"><code class="language-none">写成一行（适用于终端命令提示符）：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi<pre class="line-numbers language-none"><code class="language-none">末尾的fi就是if倒过来拼写，后面还会遇到类似的。### 1.2 if else 语法格式：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>if conditionthen    command1     command2    ...    commandNelse    commandfi<pre class="line-numbers language-none"><code class="language-none">### 1.3 if else-if else 语法格式：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>if condition1then    command1elif condition2 then     command2else    commandNfi<pre class="line-numbers language-none"><code class="language-none">以下实例判断两个变量是否相等：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>a=10b=20if [ $a == $b ]then   echo "a 等于 b"elif [ $a -gt $b ]then   echo "a 大于 b"elif [ $a -lt $b ]then   echo "a 小于 b"else   echo "没有符合的条件"fi<pre class="line-numbers language-none"><code class="language-none">输出结果：a 小于 b### 1.4 case语句Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>case 值 in模式1)    command1    command2    ...    commandN    ;;模式2）    command1    command2    ...    commandN    ;;esac<pre class="line-numbers language-none"><code class="language-none">case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。下面的脚本提示输入1到4，与每一种模式进行匹配：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>echo '输入 1 到 4 之间的数字:'echo '你输入的数字为:'read aNumcase $aNum in    1)  echo '你选择了 1'    ;;    2)  echo '你选择了 2'    ;;    3)  echo '你选择了 3'    ;;    4)  echo '你选择了 4'    ;;    *)  echo '你没有输入 1 到 4 之间的数字'    ;;esac<pre class="line-numbers language-none"><code class="language-none">输入不同的内容，会有不同的结果，例如：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>输入 1 到 4 之间的数字:你输入的数字为:3你选择了 3<pre class="line-numbers language-none"><code class="language-none">### 1.5 case ... esac 语句case ... esac 与其他语言中的 switch ... case 语句类似，是一种多分枝选择结构，每个 case 分支用右圆括号开始，用两个分号 ;; 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记。case ... esac 语法格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>case 值 in模式1)    command1    command2    command3    ;;模式2）    command1    command2    command3    ;;*)    command1    command2    command3    ;;esac<pre class="line-numbers language-none"><code class="language-none">case 后为取值，值可以为变量或常数。值后为关键字 in，接下来是匹配的各种模式，每一模式最后必须以右括号结束，模式支持正则表达式。实例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>#!/bin/shsite="runoob"case "$site" in   "runoob") echo "菜鸟教程"   ;;   "google") echo "Google 搜索"   ;;   "taobao") echo "淘宝网"   ;;esac<pre class="line-numbers language-none"><code class="language-none">输出结果为：`菜鸟教程`### 1.6 if else语句与test命令结合使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>num1=$[2*3]num2=$[1+5]if test $[num1] -eq $[num2]then    echo '两个数字相等!'else    echo '两个数字不相等!'fi<pre class="line-numbers language-none"><code class="language-none">输出结果：`两个数字相等!`## 2. 循环语句### 2.1 for 循环与其他编程语言类似，Shell支持for循环。for循环一般格式为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>for var in item1 item2 ... itemNdo    command1    command2    ...    commandNdone<pre class="line-numbers language-none"><code class="language-none">写成一行：`for var in item1 item2 ... itemN; do command1; command2… done;`当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。in列表是可选的，如果不用它，for循环使用命令行的位置参数。例如，顺序输出当前列表中的数字：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>for loop in 1 2 3 4 5do    echo "The value is: $loop"done<pre class="line-numbers language-none"><code class="language-none">输出结果：The value is: 1The value is: 2The value is: 3The value is: 4The value is: 5顺序输出字符串中的字符：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>for str in 'This is a string'do    echo $strdone<pre class="line-numbers language-none"><code class="language-none">输出结果：`This is a string`#### shell 中的 for 循环的其他方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>for((assignment;condition:next));do    command_1;    command_2;    commond_..;done;<pre class="line-numbers language-none"><code class="language-none">如上所示，这里的 for 循环与 C 中的相似，但并不完全相同。通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要,下面来看一个例子：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>#!/bin/bashfor((i=1;i&lt;=5;i++));do    echo "这是第 $i 次调用";done;<pre class="line-numbers language-none"><code class="language-none">执行结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这是第1次调用这是第2次调用这是第3次调用这是第4次调用这是第5次调用<pre class="line-numbers language-none"><code class="language-none">与 C 中相似，赋值和下一步执行可以放到代码之前循环语句之中执行，这里要注意一点：如果要在循环体中进行 for 中的 next 操作，记得变量要加 $，不然程序会变成死循环。### 2.2 while 语句while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>while conditiondo    commanddone<pre class="line-numbers language-none"><code class="language-none">以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#!/bin/bashint=1while(( $int&lt;=5 ))do    echo $int    let "int++"done<pre class="line-numbers language-none"><code class="language-none">运行脚本，输出：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>12345<pre class="line-numbers language-none"><code class="language-none">以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅：[Bash let命令](https://www.runoob.com/linux/linux-comm-let.html)。while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按&lt;Ctrl-D&gt;结束循环。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>echo '按下 &lt;CTRL-D&gt; 退出'echo -n '输入你最喜欢的网站名: 'while read FILMdo    echo "是的！$FILM 是一个好网站"done<pre class="line-numbers language-none"><code class="language-none">运行脚本，输出类似下面：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>按下 &lt;CTRL-D&gt; 退出输入你最喜欢的网站名:菜鸟教程是的！菜鸟教程 是一个好网站<pre class="line-numbers language-none"><code class="language-none">### 2.3 无限循环无限循环语法格式：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>while :do    commanddone或者while truedo    commanddone或者for (( ; ; ))<pre class="line-numbers language-none"><code class="language-none">### 2.4 until 循环until 循环执行一系列命令直至条件为 true 时停止。until 循环与 while 循环在处理方式上刚好相反。一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。until 语法格式:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>until conditiondo    commanddone<pre class="line-numbers language-none"><code class="language-none">condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。以下实例我们使用 until 命令来输出 0 ~ 9 的数字：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>#!/bin/basha=0until [ ! $a -lt 10 ]do   echo $a   a=`expr $a + 1`done<pre class="line-numbers language-none"><code class="language-none">运行结果：输出结果为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>0123456789<pre class="line-numbers language-none"><code class="language-none">### 2.5 跳出循环在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。#### `break`命令`break`命令允许跳出所有循环（终止执行后面的所有循环）。下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#!/bin/bashwhile :do    echo -n "输入 1 到 5 之间的数字:"    read aNum    case $aNum in        1|2|3|4|5) echo "你输入的数字为 $aNum!"        ;;        *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"            break        ;;    esacdone<pre class="line-numbers language-none"><code class="language-none">执行以上代码，输出结果为：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>输入 1 到 5 之间的数字:3你输入的数字为 3!输入 1 到 5 之间的数字:7你输入的数字不是 1 到 5 之间的! 游戏结束<pre class="line-numbers language-none"><code class="language-none">#### `continue`命令continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。对上面的例子进行修改：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>#!/bin/bashwhile :do    echo -n "输入 1 到 5 之间的数字: "    read aNum    case $aNum in        1|2|3|4|5) echo "你输入的数字为 $aNum!"        ;;        *) echo "你输入的数字不是 1 到 5 之间的!"            continue            echo "游戏结束"        ;;    esacdone<pre class="line-numbers language-none"><code class="language-none">运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 echo "游戏结束" 永远不会被执行。# 九、Shell 函数linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。## 1. shell中函数的定义格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>[ function ] funname [()]{    action;    [return int;]}<pre class="line-numbers language-none"><code class="language-none">说明：1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255下面的例子定义了一个函数并进行调用：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.comdemoFun(){    echo "这是我的第一个 shell 函数!"}echo "-----函数开始执行-----"demoFunecho "-----函数执行完毕-----"<pre class="line-numbers language-none"><code class="language-none">输出结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>-----函数开始执行-----这是我的第一个 shell 函数!-----函数执行完毕-----<pre class="line-numbers language-none"><code class="language-none">下面定义一个带有return语句的函数：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.comfunWithReturn(){    echo "这个函数会对输入的两个数字进行相加运算..."    echo "输入第一个数字: "    read aNum    echo "输入第二个数字: "    read anotherNum    echo "两个数字分别为 $aNum 和 $anotherNum !"    return $(($aNum+$anotherNum))}funWithReturnecho "输入的两个数字之和为 $? !"<pre class="line-numbers language-none"><code class="language-none">输出类似下面：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这个函数会对输入的两个数字进行相加运算...输入第一个数字: 1输入第二个数字: 2两个数字分别为 1 和 2 !输入的两个数字之和为 3 !<pre class="line-numbers language-none"><code class="language-none">函数返回值在调用该函数后通过 $? 来获得。$? 仅对其上一条指令负责，一旦函数返回后其返回值没有立即保存入参数，那么其返回值将不再能通过 $? 获得。函数与命令的执行结果可以作为条件语句使用。要注意的是，和 C 语言不同，shell 语言中 0 代表 true，0 以外的值代表 false。`注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。`## 2. 函数参数在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...带参数的函数示例：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.comfunWithParam(){    echo "第一个参数为 $1 !"    echo "第二个参数为 $2 !"    echo "第十个参数为 $10 !"    echo "第十个参数为 ${10} !"    echo "第十一个参数为 ${11} !"    echo "参数总数有 $# 个!"    echo "作为一个字符串输出所有参数 $* !"}funWithParam 1 2 3 4 5 6 7 8 9 34 73<pre class="line-numbers language-none"><code class="language-none">输出结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>第一个参数为 1 !第二个参数为 2 !第十个参数为 10 !第十个参数为 34 !第十一个参数为 73 !参数总数有 11 个!作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !<pre class="line-numbers language-none"><code class="language-none">注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。另外，还有几个特殊字符用来处理参数：# 十、Shell 输入/输出重定向大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。重定向命令列表如下：|命令|说明||-------|---||command &gt; file|将输出重定向到 file。||command &lt; file|将输入重定向到 file。||command &gt;&gt; file|将输出以追加的方式重定向到 file。||n &gt; file|将文件描述符为 n 的文件重定向到 file。||n &gt;&gt; file|将文件描述符为 n 的文件以追加的方式重定向到 file。||n &gt;&amp; m|将输出文件 m 和 n 合并。||n &lt;&amp; m|将输入文件 m 和 n 合并。||&lt;&lt; tag|将开始标记 tag 和结束标记 tag 之间的内容作为输入。|需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。## 1. 输出重定向重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:`command1 &gt; file1`上面这个命令执行command1然后将输出的内容存入file1。注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。实例执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>$ who &gt; users<pre class="line-numbers language-none"><code class="language-none">执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。你可以使用 cat 命令查看文件内容：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>$ cat users_mbsetupuser console  Oct 31 17:35 tianqixin    console  Oct 31 17:35 tianqixin    ttys000  Dec  1 11:33 <pre class="line-numbers language-none"><code class="language-none">输出重定向会覆盖文件内容，请看下面的例子：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>$ echo "菜鸟教程：www.runoob.com" &gt; users$ cat users菜鸟教程：www.runoob.com$<pre class="line-numbers language-none"><code class="language-none">如果不希望文件内容被覆盖，可以使用`&gt;&gt;` 追加到文件末尾，例如：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>$ echo "菜鸟教程：www.runoob.com" &gt;&gt; users$ cat users菜鸟教程：www.runoob.com菜鸟教程：www.runoob.com$<pre class="line-numbers language-none"><code class="language-none">## 2. 输入重定向和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：`command1 &lt; file1`这样，本来需要从键盘获取输入的命令会转移到文件读取内容。注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。实例接着以上实例，我们需要统计 users 文件的行数,执行以下命令：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>$ wc -l users       2 users<pre class="line-numbers language-none"><code class="language-none">也可以将输入重定向到 users 文件：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>$  wc -l &lt; users       2 <pre class="line-numbers language-none"><code class="language-none">注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。`command1 &lt; infile &gt; outfile`同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。## 3. 重定向深入讲解一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：- 标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。- 标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。- 标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。如果希望 stderr 重定向到 file，可以这样写：`$ command 2 &gt; file`如果希望 stderr 追加到 file 文件末尾，可以这样写：`$ command 2 &gt;&gt; file`2 表示标准错误文件(stderr)。如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>$ command &gt; file 2&gt;&amp;1或者$ command &gt;&gt; file 2&gt;&amp;1<pre class="line-numbers language-none"><code class="language-none">如果希望对 stdin 和 stdout 都重定向，可以这样写：`$ command &lt; file1 &gt;file2`command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。## 4. Here DocumentHere Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。它的基本的形式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>command &lt;&lt; delimiter    documentdelimiter<pre class="line-numbers language-none"><code class="language-none">它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。注意：结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。开始的delimiter前后的空格会被忽略掉。实例在命令行中通过 wc -l 命令计算 Here Document 的行数：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>$ wc -l &lt;&lt; EOF    欢迎来到    菜鸟教程    www.runoob.comEOF3          # 输出结果为 3 行$<pre class="line-numbers language-none"><code class="language-none">我们也可以将 Here Document 用在脚本中，例如：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.comcat &lt;&lt; EOF欢迎来到菜鸟教程www.runoob.comEOF<pre class="line-numbers language-none"><code class="language-none">执行以上脚本，输出结果：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>欢迎来到菜鸟教程www.runoob.com<pre class="line-numbers language-none"><code class="language-none">## 5. /dev/null 文件如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：`$ command &gt; /dev/null`/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到"禁止输出"的效果。如果希望屏蔽 stdout 和 stderr，可以这样写：`$ command &gt; /dev/null 2&gt;&amp;1`注意：0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。这里的 2 和 &gt; 之间不可以有空格，2&gt; 是一体的时候才表示错误输出。# 十一、Shell 文件包含和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。Shell 文件包含的语法格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>. filename   # 注意点号(.)和文件名中间有一空格或source filename<pre class="line-numbers language-none"><code class="language-none">实例创建两个 shell 脚本文件。test1.sh 代码如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.comurl="http://www.runoob.com"<pre class="line-numbers language-none"><code class="language-none">test2.sh 代码如下：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>#!/bin/bash# author:菜鸟教程# url:www.runoob.com#使用 . 号来引用test1.sh 文件. ./test1.sh# 或者使用以下包含文件代码# source ./test1.shecho "菜鸟教程官网地址：$url"<pre class="line-numbers language-none"><code class="language-none">接下来，我们为 test2.sh 添加可执行权限并执行：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>$ chmod +x test2.sh $ ./test2.sh 菜鸟教程官网地址：http://www.runoob.com```注：被包含的文件 test1.sh 不需要可执行权限。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
